{"version":3,"sources":["App.js","index.js"],"names":["App","useState","currentAccount","setCurrentAccount","isLoading","setIsLoading","allWaves","setAllWaves","contractABI","abi","getAllWaves","a","window","ethereum","provider","ethers","providers","Web3Provider","signer","getSigner","wavePortalContract","Contract","waves","wavesCleaned","forEach","wave","push","address","waver","timestamp","Date","message","console","log","checkIfWalletIsConnected","request","method","accounts","length","account","connectWallet","alert","waveMessage","setWaveMessage","getTotalWaves","count","toNumber","gasLimit","waveTxn","hash","wait","useEffect","className","role","aria-label","onSubmit","event","preventDefault","style","display","justifyContent","flexDirection","type","onChange","e","target","value","placeholder","onClick","marginLeft","map","index","key","marginTop","padding","border","fontSize","color","toString","slice","paddingTop","paddingBottom","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bc81dcac.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport './App.css';\nimport abi from './utils/WavePortal.json';\n\nimport 'bootstrap/dist/css/bootstrap.css';\n\nconst App = () => {\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  /**\n   * Create a varaible here that holds the contract address after you deploy!\n   */\n\n  const [allWaves, setAllWaves] = useState([]);\n\n  const contractAddress = \"0x6DB8ebb4290393a01BCC7Bdf00d1Ac106F254d72\";\n  const contractABI = abi.abi;\n\n  const getAllWaves = async () => {\n    try {\n      const { ethereum } = window;\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\n\n        const waves = await wavePortalContract.getAllWaves();\n\n\n        let wavesCleaned = [];\n        waves.forEach(wave => {\n          wavesCleaned.push({\n            address: wave.waver,\n            timestamp: new Date(wave.timestamp * 1000),\n            message: wave.message\n          });\n        });\n\n        setAllWaves(wavesCleaned);\n      } else {\n        console.log(\"Ethereum object doesn't exist!\")\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n  \n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        console.log(\"Make sure you have metamask!\");\n        return;\n      } else {\n        console.log(\"We have the ethereum object\", ethereum);\n      }\n\n      const accounts = await ethereum.request({ method: 'eth_accounts' });\n      console.log(accounts);\n\n      if (accounts.length !== 0) {\n        const account = accounts[0];\n        console.log(\"Found an authorized account:\", account);\n        setCurrentAccount(account);\n        getAllWaves();\n      } else {\n        console.log(\"No authorized account found\")\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\n\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]); \n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const [waveMessage, setWaveMessage] = useState(\"\");\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    // console.log(event.target[0].value);\n\n    \n  }\n\n  const wave = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\n        \n        let count = await wavePortalContract.getTotalWaves();\n        console.log(\"Retrieved total wave count...\", count.toNumber());\n\n        const waveTxn = await wavePortalContract.wave(waveMessage, { gasLimit: 300000 });\n        console.log(\"Mining...\", waveTxn.hash);\n        setIsLoading(true);\n\n        await waveTxn.wait();\n        console.log(\"Mined -- \", waveTxn.hash);\n        \n\n        count = await wavePortalContract.getTotalWaves();\n        console.log(\"Retrieved total wave count...\", count.toNumber());\n        \n        setIsLoading(false);\n        getAllWaves();\n        alert(\"Mining Successful!\");\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, [])\n  \n  return (\n    <div className=\"mainContainer\">\n      <div className=\"dataContainer\">\n        <div className=\"header\">\n        <span role=\"img\" aria-label=\"hello\">ðŸ‘‹</span> Hey there!\n        </div>\n\n        <div className=\"bio\">\n          I am Ryuzaki and I am Machine Learning and BlockChain enthusiast. Connect your Ethereum wallet and wave at me!\n        </div>\n\n        <form onSubmit={handleSubmit} style={{display: \"flex\", justifyContent: \"center\", flexDirection: \"column\"}}>\n            <div className=\"mb-3 my-3\">\n                <input type=\"text\" className=\"form-control\" onChange={(e) => setWaveMessage(e.target.value)} placeholder=\"Send me a message\"/>\n            </div>\n            <button type=\"submit\" className=\"waveButton btn btn-primary\"  onClick={wave}>\n              Wave at Me\n            </button>\n        </form>\n\n        <br/>\n        {isLoading &&\n          <div className=\"spinner-border\" role=\"status\" style={{marginLeft:\"47%\"}}>\n            <span className=\"sr-only\"></span>\n          </div>\n        }\n        \n\n        {!currentAccount && (\n          <button className=\"waveButton\" onClick={connectWallet}>\n            Connect Wallet\n          </button>\n        )}\n\n        {allWaves.map((wave, index) => {\n          return (\n            <div key={index} style={{ marginTop: \"16px\", padding: \"8px\",border:\"2px solid #A6A6A6\" }}>\n              \n              <div style={{ fontSize: \"1rem\",  padding: \"0px\", color: \"#A6A6A6\" }}>From: {wave.address}</div>\n              <div style={{ fontSize: \"1rem\",  padding: \"0px\", color: \"#A6A6A6\"}}>{wave.timestamp.toString().slice(4,25)}</div>\n              <div style={{ fontSize: \"1.4rem\", paddingTop: \"3px\",paddingBottom: \"4px\", color:\"#4F4F4F \" }}> {wave.message}</div>\n              \n              \n            </div>)\n        })}\n        <br/>\n        <br/>\n        <br/>\n      </div>\n    </div>\n  );\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}