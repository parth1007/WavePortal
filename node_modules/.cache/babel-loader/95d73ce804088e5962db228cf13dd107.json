{"ast":null,"code":"var _jsxFileName = \"/home/parth/BlockChain/BuildSpace1/client/waveportal-starter-project-main/src/App.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport './App.css';\nimport abi from './utils/WavePortal.json';\n\nconst App = () => {\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  /**\n   * Create a varaible here that holds the contract address after you deploy!\n   */\n\n  const contractAddress = \"0x686D24cF80E9D10e952Ba0F0Eda0a85393B14898\";\n  const contractABI = abi.abi;\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        console.log(\"Make sure you have metamask!\");\n        return;\n      } else {\n        console.log(\"We have the ethereum object\", ethereum);\n      }\n\n      const accounts = await ethereum.request({\n        method: 'eth_accounts'\n      });\n      console.log(accounts);\n\n      if (accounts.length !== 0) {\n        const account = accounts[0];\n        console.log(\"Found an authorized account:\", account);\n        setCurrentAccount(account);\n      } else {\n        console.log(\"No authorized account found\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const connectWallet = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const wave = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\n        let count = await wavePortalContract.getTotalWaves();\n        console.log(\"Retrieved total wave count...\", count.toNumber());\n        const waveTxn = await wavePortalContract.wave();\n        console.log(\"Mining...\", waveTxn.hash);\n        setIsLoading(true);\n        await waveTxn.wait();\n        console.log(\"Mined -- \", waveTxn.hash);\n        setIsLoading(false);\n        count = await wavePortalContract.getTotalWaves();\n        console.log(\"Retrieved total wave count...\", count.toNumber());\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mainContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dataContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  }, \"\\uD83D\\uDC4B\"), \" Hey there!\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"bio\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }\n  }, \"I am Parth Soni and I worked on AI and Web3 so that's pretty cool right? Connect your Ethereum wallet and wave at me!\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"waveButton\",\n    onClick: wave,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }\n  }, \"Wave at Me\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }\n  }), !isLoading && /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 11\n    }\n  }, \"Mining... \"), !currentAccount && /*#__PURE__*/React.createElement(\"button\", {\n    className: \"waveButton\",\n    onClick: connectWallet,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 11\n    }\n  }, \"Connect Wallet\")));\n};\n\nexport default App;","map":{"version":3,"names":["React","useEffect","useState","ethers","abi","App","currentAccount","setCurrentAccount","isLoading","setIsLoading","contractAddress","contractABI","checkIfWalletIsConnected","ethereum","window","console","log","accounts","request","method","length","account","error","connectWallet","alert","wave","provider","providers","Web3Provider","signer","getSigner","wavePortalContract","Contract","count","getTotalWaves","toNumber","waveTxn","hash","wait"],"sources":["/home/parth/BlockChain/BuildSpace1/client/waveportal-starter-project-main/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport './App.css';\nimport abi from './utils/WavePortal.json';\n\n\nconst App = () => {\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  /**\n   * Create a varaible here that holds the contract address after you deploy!\n   */\n  const contractAddress = \"0x686D24cF80E9D10e952Ba0F0Eda0a85393B14898\";\n  const contractABI = abi.abi;\n\n  \n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        console.log(\"Make sure you have metamask!\");\n        return;\n      } else {\n        console.log(\"We have the ethereum object\", ethereum);\n      }\n\n      const accounts = await ethereum.request({ method: 'eth_accounts' });\n      console.log(accounts);\n\n      if (accounts.length !== 0) {\n        const account = accounts[0];\n        console.log(\"Found an authorized account:\", account);\n        setCurrentAccount(account)\n      } else {\n        console.log(\"No authorized account found\")\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\n\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]); \n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const wave = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\n\n        let count = await wavePortalContract.getTotalWaves();\n        console.log(\"Retrieved total wave count...\", count.toNumber());\n\n        const waveTxn = await wavePortalContract.wave();\n        console.log(\"Mining...\", waveTxn.hash);\n        setIsLoading(true);\n\n        await waveTxn.wait();\n        console.log(\"Mined -- \", waveTxn.hash);\n        setIsLoading(false);\n\n        count = await wavePortalContract.getTotalWaves();\n        console.log(\"Retrieved total wave count...\", count.toNumber());\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, [])\n  \n  return (\n    <div className=\"mainContainer\">\n      <div className=\"dataContainer\">\n        <div className=\"header\">\n        <span>ðŸ‘‹</span> Hey there!\n        </div>\n\n        <div className=\"bio\">\n          I am Parth Soni and I worked on AI and Web3 so that's pretty cool right? Connect your Ethereum wallet and wave at me!\n        </div>\n\n        <button className=\"waveButton\" onClick={wave}>\n          Wave at Me\n        </button>\n        <br/>\n        {!isLoading &&\n          <h4>Mining... </h4>\n\n        }\n\n        {!currentAccount && (\n          <button className=\"waveButton\" onClick={connectWallet}>\n            Connect Wallet\n          </button>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}